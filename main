import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.util.*;
import weka.classifiers.trees.J48;
import weka.core.*;
import weka.core.converters.ConverterUtils.DataSource;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.Timer;

//Class for the Borrower
class Borrower {
    String name;
    int loanAmount;
    int creditScore;
    int income;
    int existingDebt;
    String riskLevel;
    double interestRate;

    Borrower(String name, int loanAmount, int creditScore, int income, int existingDebt) {
        this.name = name;
        this.loanAmount = loanAmount;
        this.creditScore = creditScore;
        this.income = income;
        this.existingDebt = existingDebt;
        this.riskLevel = getRiskLevel(creditScore);
        this.interestRate = calculateInterestRate(creditScore, loanAmount);
    }

    private String getRiskLevel(int creditScore) {
        if (creditScore > 750) {
            return "Low Risk";
        } else if (creditScore >= 600) {
            return "Medium Risk";
        } else {
            return "High Risk";
        }
    }

    private double calculateInterestRate(int creditScore, int loanAmount) {
        double baseRate = 10.0 - (creditScore - 500) / 30.0;
        if (loanAmount > 100000) {
            baseRate += 2;
        } else if (loanAmount > 50000) {
            baseRate += 1;
        }
        return Math.min(baseRate, 15.0);
    }

    public String toString() {
        return "Name: " + name + ", Loan: " + loanAmount + ", Credit Score: (between : 350-850)" + creditScore + ", Income: " + income + ", Debt: " + existingDebt + ", Risk: " + riskLevel + ", Interest Rate: " + interestRate + "%";
    }
}

//Class for the Lender
class Lender {
    String name;
    int maxLoanAmount;
    double interestRate;

    Lender(String name, int maxLoanAmount, double interestRate) {
        this.name = name;
        this.maxLoanAmount = maxLoanAmount;
        this.interestRate = interestRate;
    }

    public String toString() {
        return "Name: " + name + ", Max Loan: " + maxLoanAmount + ", Interest Rate: " + interestRate + "%";
    }
}

class LoanApprovalAI {
    J48 model;

    // Load and train the model
    public void trainModel(String trainingDataPath) throws Exception {
        DataSource source = new DataSource(trainingDataPath);
        Instances data = source.getDataSet();
        data.setClassIndex(data.numAttributes() - 1);
    
        model = new J48(); 
        model.buildClassifier(data);
    }

    // Approve Loan Based on AI Model
    public String approveLoan(Borrower borrower) throws Exception {
        if (model == null) {
            return "Model not trained. Call trainModel() first.";
        }

        // Create instance with borrower data
        Instance instance = createInstance(borrower);
        double prediction = model.classifyInstance(instance);

        return (prediction == 1.0) ? "Approved" : "Denied";
    }

    private Instance createInstance(Borrower borrower) {
        ArrayList<Attribute> attributes = new ArrayList<>();
        attributes.add(new Attribute("loanAmount"));
        attributes.add(new Attribute("creditScore"));
        attributes.add(new Attribute("income"));
        attributes.add(new Attribute("existingDebt"));
        List<String> classValues = Arrays.asList("Denied", "Approved");
        attributes.add(new Attribute("class", classValues));

        Instances dataset = new Instances("TestInstance", attributes, 0);
        dataset.setClassIndex(4);

        Instance instance = new DenseInstance(5);
        instance.setValue(attributes.get(0), borrower.loanAmount);
        instance.setValue(attributes.get(1), borrower.creditScore);
        instance.setValue(attributes.get(2), borrower.income);
        instance.setValue(attributes.get(3), borrower.existingDebt);
        instance.setDataset(dataset);

        return instance;
    }
}
// Class for FileStorage
class FileStorage {
    public static void save(String data) {
        try (FileWriter writer = new FileWriter("data.txt", true)) {
            writer.write(data + "\n");
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }

    public static void load() {
        try (BufferedReader reader = new BufferedReader(new FileReader("data.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading data: " + e.getMessage());
        }
    }
}


 class LendingAdvisorGUI {
    JFrame frame;
    JLabel backgroundLabel;
    JLabel Text;
    JButton addBorrowerButton, addLenderButton, matchLoanButton, viewDataButton, exitButton;
    JLabel footerLabel;
    List<Borrower> borrowers = new ArrayList<>();
    List<Lender> lenders = new ArrayList<>();
    int xPos = 600;

    LendingAdvisorGUI() {
        frame = new JFrame("Lending Advisor");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 500);
        frame.setLayout(null);
        
        JLabel label = new JLabel("Find the Best Loan or Lender in Just a Few Clicks!!");
        label.setBounds(50, 50, 1500, 50);
        label.setFont(new Font("Arial", Font.ITALIC, 40));
        label.setForeground(Color.RED);
        frame.add(label);
        
        ImageIcon background = new ImageIcon("C:\\Users\\nisha\\Downloads\\MY JAVA FOLDER\\LoanProject\\Backimage.jpg");
        Image scaledImage = background.getImage().getScaledInstance(1600, 800, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);

        backgroundLabel = new JLabel(scaledIcon);
        backgroundLabel.setBounds(0, 0, 1600, 800);

        addBorrowerButton = new JButton("Add Borrower");
        addLenderButton = new JButton("Add Lender");
        matchLoanButton = new JButton("Match Loan");
        viewDataButton = new JButton("View Data");
        exitButton = new JButton("Exit");

        JButton[] buttons = {addBorrowerButton, addLenderButton, matchLoanButton, viewDataButton, exitButton};

        for (JButton button : buttons) {
            button.setFocusPainted(false);
            button.setBackground(new Color(0, 51, 102));
            button.setForeground(Color.WHITE);
            button.setFont(new Font("Arial", Font.BOLD, 14));
            button.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
            button.setOpaque(true);

            // Change color on hover
            button.addMouseListener(new MouseAdapter() {
                public void mouseEntered(MouseEvent e) {
                    button.setBackground(new Color(51, 153, 255));
                }

                public void mouseExited(MouseEvent e) {
                    button.setBackground(new Color(0, 51, 102));
                }
            });
        }

        // Add action listener to button
        addBorrowerButton.addActionListener(e -> AddBorrowerForm());
        addLenderButton.addActionListener(e -> AddLenderForm());
        matchLoanButton.addActionListener(e -> openMatchLoanForm());
        viewDataButton.addActionListener(e -> viewData());
        exitButton.addActionListener(e -> exitApplication());

        

        // Set footer label
        footerLabel = new JLabel("Designed by Nishant | Contact: support@example.com");
        footerLabel.setForeground(Color.BLACK);
        footerLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        footerLabel.setOpaque(true);
        footerLabel.setBackground(Color.WHITE); 
        footerLabel.setBounds(xPos, 430, 400, 30); 

        // Timer for moving text
        Timer timer = new Timer(50, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                xPos -= 2; 
                if (xPos < -300) { 
                    xPos = 600;
                }
                footerLabel.setBounds(xPos, 760, 400, 30);
                frame.repaint();
            }
        });
        timer.start();

        // Set button positions
        addBorrowerButton.setBounds(100, 250, 200, 40);
        addLenderButton.setBounds(100, 310, 200, 40);
        matchLoanButton.setBounds(100, 370, 200, 40);
        viewDataButton.setBounds(100, 420, 200, 40);
        exitButton.setBounds(100, 480, 200, 40);

        // Add components to frame
        frame.add(addBorrowerButton);
        frame.add(addLenderButton);
        frame.add(matchLoanButton);
        frame.add(viewDataButton);
        frame.add(exitButton);
        frame.add(footerLabel);
        frame.add(backgroundLabel);

        frame.setVisible(true);
    }

    // Function for Borrower
    private void AddBorrowerForm() {
        JFrame borrowerFrame = new JFrame("Submit Borrower Details");
        borrowerFrame.setSize(400, 300);
        borrowerFrame.setLayout(new GridLayout(6, 2));
        borrowerFrame.setResizable(false);
        borrowerFrame.setLocationRelativeTo(frame); 
        borrowerFrame.getContentPane().setBackground(new Color(144, 238, 144));

        JTextField nameField = new JTextField();
        JTextField loanAmountField = new JTextField();
        JTextField creditScoreField = new JTextField();
        JTextField incomeField = new JTextField();
        JTextField existingDebtField = new JTextField();
        JButton submitButton = new JButton("Submit");
        submitButton.setBackground(new Color(0, 153, 76));
        submitButton.setForeground(new Color(144, 238, 144));

        borrowerFrame.add(new JLabel("Name:"));
        borrowerFrame.add(nameField);
        borrowerFrame.add(new JLabel("Loan Amount:"));
        borrowerFrame.add(loanAmountField);
        borrowerFrame.add(new JLabel("Credit Score:"));
        borrowerFrame.add(creditScoreField);
        borrowerFrame.add(new JLabel("Income:"));
        borrowerFrame.add(incomeField);
        borrowerFrame.add(new JLabel("Existing Debt:"));
        borrowerFrame.add(existingDebtField);
        borrowerFrame.add(submitButton);

        submitButton.addActionListener(e -> {
            if (nameField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(borrowerFrame, "Please fill Name");
                return;
            }
            if (loanAmountField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(borrowerFrame, "Please fill Loan Amount");
                return;
            }
            if (creditScoreField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(borrowerFrame, "Please fill Credit Score");
                return;
            }
            if (incomeField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(borrowerFrame, "Please fill Income");
                return;
            }
            if (existingDebtField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(borrowerFrame, "Please fill Existing Debt");
                return;
            }
        
            String name = nameField.getText();
            int loanAmount = Integer.parseInt(loanAmountField.getText());
            int creditScore = Integer.parseInt(creditScoreField.getText());
            int income = Integer.parseInt(incomeField.getText());
            int existingDebt = Integer.parseInt(existingDebtField.getText());
        
            Borrower borrower = new Borrower(name, loanAmount, creditScore, income, existingDebt);
            
            // Add the borrower to the list
            borrowers.add(borrower);
            
            FileStorage.save(borrower.toString());
            JOptionPane.showMessageDialog(borrowerFrame, "Details are submitted successfully!");
            borrowerFrame.dispose();
        });
        

        borrowerFrame.setVisible(true);
    }

    // function for Lender
    private void AddLenderForm() {
        JFrame lenderFrame = new JFrame("Add Lender");
        lenderFrame.setSize(450, 300);
        lenderFrame.setLayout(new GridLayout(4, 2));
        lenderFrame.setResizable(false);
        lenderFrame.setLocationRelativeTo(frame); // Center it relative to the main window
        lenderFrame.getContentPane().setBackground(new Color(144, 238, 144)); // Background color

        JTextField nameField = new JTextField();
        JTextField amountField = new JTextField();
        JTextField interestRateField = new JTextField();
        JTextField durationField = new JTextField();
        JButton submitButton = new JButton("Submit");
        submitButton.setBackground(new Color(0, 153, 76)); // Green button
        submitButton.setForeground(Color.WHITE);

        lenderFrame.add(new JLabel("Name:"));
        lenderFrame.add(nameField);
        lenderFrame.add(new JLabel("Max Amount:"));
        lenderFrame.add(amountField);
        lenderFrame.add(new JLabel("Interest Rate:"));
        lenderFrame.add(interestRateField);
        lenderFrame.add(submitButton);

        submitButton.addActionListener(e -> {
            if (nameField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(lenderFrame, "Please fill Name");
                return;
            }
            if (amountField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(lenderFrame, "Please fill Lending Amount");
                return;
            }
            if (interestRateField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(lenderFrame, "Please fill Interest Rate");
                return;
            }
        
            String name = nameField.getText();
            int maxLoanAmount = Integer.parseInt(amountField.getText());
            double interestRate = Double.parseDouble(interestRateField.getText());
        
            Lender lender = new Lender(name, maxLoanAmount, interestRate);
            
            // Add the lender to the list
            lenders.add(lender);
            
            FileStorage.save(lender.toString());
            JOptionPane.showMessageDialog(lenderFrame, "Details are submitted successfully!");
            lenderFrame.dispose();
        });
        
        lenderFrame.setVisible(true);

    }

    // Function to Match Loans
private void openMatchLoanForm() {
    JOptionPane.showMessageDialog(frame, "Opening Match Loan Form..."); 

    if (borrowers.isEmpty() || lenders.isEmpty()) {
        JOptionPane.showMessageDialog(frame, "No borrowers or lenders available for matching.");
        return;
    }

    JFrame matchFrame = new JFrame("Match Loan");
    matchFrame.setSize(400, 100);
    matchFrame.setLayout(new GridLayout(borrowers.size() + 4, 1));
    matchFrame.setLocationRelativeTo(frame);
    matchFrame.setResizable(false);
    matchFrame.getContentPane().setBackground(Color.LIGHT_GRAY);



    for (Borrower borrower : borrowers) {
        Lender bestLender = null;

        // Find the best lender for the borrower
        for (Lender lender : lenders) {
            if (lender.maxLoanAmount >= borrower.loanAmount) {
                if (bestLender == null || lender.interestRate < bestLender.interestRate) {
                    bestLender = lender;
                }
            }
        }

        if (bestLender != null) {
            JLabel matchLabel = new JLabel(
                borrower.name + " matched with " + bestLender.name +
                " (Loan: " + borrower.loanAmount + ", Interest: " + bestLender.interestRate + "%)"
            );
            matchFrame.add(matchLabel);
        } else {
            JLabel noMatchLabel = new JLabel(borrower.name + " - No suitable lender found.");
            matchFrame.add(noMatchLabel);
        }
    }

    matchFrame.setVisible(true); 
}

// Function of View data
private void viewData() {
    JFrame dataFrame = new JFrame("View Data");
    dataFrame.setSize(500, 200);
    dataFrame.setLayout(new BorderLayout());
    dataFrame.setLocationRelativeTo(frame);
    dataFrame.setResizable(false);
    dataFrame.getContentPane().setBackground(new Color(2, 4, 6));

    JTextArea textArea = new JTextArea();
    textArea.setEditable(false);
    textArea.setForeground(Color.WHITE);
    textArea.setBackground(new Color(20, 20, 20)); 
    textArea.setOpaque(true); 

    StringBuilder data = new StringBuilder();
    data.append("Borrowers :-\n\n\n"); 
    for (Borrower borrower : borrowers) {
        data.append(borrower.toString()).append("\n");
    }

    data.append("\n\nLenders :-\n\n"); 
    for (Lender lender : lenders) {
        data.append(lender.toString()).append("\n");
    }

    textArea.setText(data.toString());

    JScrollPane scrollPane = new JScrollPane(textArea);
    scrollPane.getViewport().setBackground(new Color(2, 4, 6));

    dataFrame.add(scrollPane, BorderLayout.CENTER);
    dataFrame.setVisible(true);
}

//function for exit
private void exitApplication() {
    int choice = JOptionPane.showConfirmDialog(
        frame,
        "Are you sure you want to exit?",
        "Exit Confirmation",
        JOptionPane.YES_NO_OPTION
    );

    if (choice == JOptionPane.YES_OPTION) {
        frame.dispose();
        System.exit(0); 
    }
}

}

public class LendingAdvisor {
    public static List<Borrower> borrowers = new ArrayList<>();
    public static List<Lender> lenders = new ArrayList<>();
    static LoanApprovalAI ai = new LoanApprovalAI();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            ai.trainModel("data/loan_data.arff");
            System.out.println("AI Model Loaded Successfully!");
        } catch (Exception e) {
            System.out.println("AI Model Training Error: " + e.getMessage());
        }

        new Thread(() -> {
            new LendingAdvisorGUI();
        }).start();

        while (true) {
            System.out.println("\n1. Add Borrower\n2. Add Lender\n3. Match Loan\n4. View Data\n5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            if (choice == 1) {
                System.out.print("Enter Borrower Name: ");
                String name = scanner.nextLine();
                System.out.print("Enter Loan Amount: ");
                int loanAmount = scanner.nextInt();
                System.out.print("Enter Credit Score: ");
                int creditScore = scanner.nextInt();
                System.out.print("Enter Monthly Income: ");
                int income = scanner.nextInt();
                System.out.print("Enter Existing Debt: ");
                int existingDebt = scanner.nextInt();

                Borrower borrower = new Borrower(name, loanAmount, creditScore, income, existingDebt);
                borrowers.add(borrower);
                FileStorage.save(borrower.toString());

                // ✅ AI Prediction after adding Borrower
                try {
                    String loanDecision = ai.approveLoan(borrower);
                    System.out.println("Loan Status: " + loanDecision);
                } catch (Exception e) {
                    System.out.println("AI Prediction Error: " + e.getMessage());
                }
            } 
            else if (choice == 2) {
                System.out.print("Enter Lender Name: ");
                String name = scanner.nextLine();
                System.out.print("Enter Max Loan Amount: ");
                int maxLoanAmount = scanner.nextInt();
                System.out.print("Enter Interest Rate: ");
                double interestRate = scanner.nextDouble();

                Lender lender = new Lender(name, maxLoanAmount, interestRate);
                lenders.add(lender);
                FileStorage.save(lender.toString());
            } 
            else if (choice == 3) {
                matchLoan();
            } 
            else if (choice == 4) {
                System.out.println("\nStored Data:");
                FileStorage.load();
            } 
            else if (choice == 5) {
                System.out.println("Exiting...");
                break;
            } 
            else {
                System.out.println("Invalid option. Try again.");
            }
        }

        scanner.close();
    }

    public static void matchLoan() {
        if (borrowers.isEmpty() || lenders.isEmpty()) {
            System.out.println("No data available to match loans.");
            return;
        }

        for (Borrower borrower : borrowers) {
            Lender bestLender = null;
            double bestRate = 100.0;

            for (Lender lender : lenders) {
                if (borrower.loanAmount <= lender.maxLoanAmount && lender.interestRate <= borrower.interestRate) {
                    if (lender.interestRate < bestRate) {
                        bestRate = lender.interestRate;
                        bestLender = lender;
                    }
                }
            }

            if (bestLender != null) {
                System.out.println("\nLoan Matched:");
                System.out.println(borrower.name + " gets a loan from " + bestLender.name + " at " + bestLender.interestRate + "% interest.");
            } else {
                System.out.println("No lender found for " + borrower.name);
            }
        }
    }
}
